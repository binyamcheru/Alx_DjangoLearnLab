"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4yp5+05^+a=+pd!q3ea487(s13ep1jkr(#zdw!4)96z-o_yw3o'

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True 

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'relationship_app',
    'bookshelf'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'bookshelf.CustomUser'  # غير اسم app حسب مشروعك

#_________security_____
# أمان المتصفح
DEBUG = False  # في بيئة الإنتاج فقط
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'
SECURE_CONTENT_TYPE_NOSNIFF = True

# إرسال الكوكيز عبر HTTPS فقط
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True #to redirect all non-HTTPS requests to HTTPS.

# اختياري - إجبار HTTPS
SECURE_SSL_REDIRECT = True

# حماية من هجمات XSS في الوسائط
SECURE_REFERRER_POLICY = "strict-origin"

SECURE_HSTS_SECONDS:31536000 # Set an appropriate value (e.g., 31536000 for one year) to instruct browsers to only access the site via HTTPS 
#for the specified time.

#Set to True to include all subdomains in the HSTS policy and to allow preloading.
SECURE_HSTS_INCLUDE_SUBDOMAINS = True #HTTPS for also subdomains not just the main domain 
SECURE_HSTS_PRELOAD = True # use HTTPS always not allowing HTTP for even first time


SESSION_COOKIE_SECURE:True # Set to True to ensure session cookies are only transmitted over HTTPS.
CSRF_COOKIE_SECURE:True # Set to True to ensure CSRF cookies are only transmitted over HTTPS.

X_FRAME_OPTIONS:'DENY' # Set to "DENY" to prevent your site from being framed and protect against clickjacking.
SECURE_CONTENT_TYPE_NOSNIFF:True # Set to True to prevent browsers from MIME-sniffing a response away from the declared content-type.
SECURE_BROWSER_XSS_FILTER:True # Set to True to enable the browser’s XSS filtering and help prevent cross-site scripting attacks.

# Tell Django it’s behind a secure proxy and to trust the X-Forwarded-Proto header
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')  # إذا كانت البنية التحتية تستخدم HTTPS خلف بروكسي مثل Nginx أو Heroku



'''# SECURITY.md
تم إنشاء ملف توثيق أمني باسم Security Documentation يحتوي على كافة التعديلات التي تم تطبيقها لتأمين تطبيق Django الخاص بك، خاصة ما يتعلق بـ HTTPS والإعدادات المرتبطة به مثل:

تفعيل HSTS وخياراته (SECURE_HSTS_SECONDS, INCLUDE_SUBDOMAINS, PRELOAD)

تأمين الكوكيز (SESSION_COOKIE_SECURE, CSRF_COOKIE_SECURE)

الحماية من XSS و MIME sniffing

استخدام CSRF tokens داخل النماذج

الحماية من SQL Injection باستخدام Django ORM

إمكانية إضافة Content Security Policy (CSP) باستخدام django-csp

# Security Hardening Documentation – LibraryProject

## 🔐 HTTPS & Security Settings

### 1. DEBUG = False
Used in production to prevent exposure of sensitive error pages.
```python
DEBUG = False
```

### 2. ALLOWED_HOSTS
Specifies valid domains Django can serve.
```python
ALLOWED_HOSTS = ['yourdomain.com', 'www.yourdomain.com', '127.0.0.1']
```

### 3. HTTPS Enforcement
Redirects all HTTP requests to HTTPS.
```python
SECURE_SSL_REDIRECT = True
```

### 4. HTTP Strict Transport Security (HSTS)
Forces browsers to use HTTPS.
```python
SECURE_HSTS_SECONDS = 31536000  # One year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
```

### 5. Secure Cookies
Ensures cookies are only sent over HTTPS.
```python
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
```

### 6. XSS and MIME Type Protection
```python
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
```

## 🧾 CSRF Protection in Templates
All HTML forms include {% csrf_token %}:
```html
<form method="POST">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Submit</button>
</form>
```

## 🔎 Input Sanitization using Django Forms
Example in forms.py:
```python
def clean_title(self):
    title = self.cleaned_data.get('title')
    if "<script>" in title:
        raise forms.ValidationError("Invalid title")
    return title
```

## 🛡️ SQL Injection Prevention
All data access is done via Django ORM:
```python
Book.objects.filter(title__icontains=query)
```

## 🔒 Recommended Grouping in settings.py
```python
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
```

## ⛓️ Optional CSP Middleware
Can be added via `django-csp` for enhanced protection from XSS attacks.
'''